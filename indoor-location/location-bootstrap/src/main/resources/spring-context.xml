<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<context:component-scan  base-package="cn.edu.uestc.indoorlocation"/>
	<context:annotation-config />
	<context:property-placeholder location="classpath:bootstrap.properties"/>
	<!--  
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxActive" value="${redis.maxActive}" />  
        <property name="maxWait" value="${redis.maxWait}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>  
      
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
        p:host-name="${redis.host}" p:port="${redis.port}"  p:pool-config-ref="poolConfig"/>  
      
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory"   ref="connectionFactory" />  
    </bean>         
	-->
	<!--  Serializer -->
	<bean id="serializer" class="cn.edu.uestc.indoorlocation.communication.message.ProtoStuffSerializer" />
	
	<!-- codec -->
	<!--  scope="prototype" ????????? 注此处已注释掉 -->
	<!--
	<bean id="byteToJsonDecoder"  class="cn.edu.uestc.indoorlocation.communication.codec.ByteToJsonDecoder" />
	<bean id="jsonToByteEncoder"  class="cn.edu.uestc.indoorlocation.communication.codec.JsonToByteEncoder" />
	<bean id="authDecoder"        class="cn.edu.uestc.indoorlocation.communication.codec.AuthDecoder"       />
	<bean id="messageHandler"     class="cn.edu.uestc.indoorlocation.communication.codec.MessageHandler"    />
	<bean id="locationHandler"    class="cn.edu.uestc.indoorlocation.communication.codec.LocationHandler"   />
	-->
	
	<!-- dbcp数据源配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${dbcp.driverClassName}" />
		<property name="url" value="${dbcp.url}" />
		<property name="username" value="${dbcp.username}" />
		<property name="password" value="${dbcp.password}"/>
		<property name="initialSize" value="${dbcp.initialSize}" />
		<property name="maxActive" value="${dbcp.maxActive}"></property>
  		<property name="maxIdle" value="${dbcp.maxIdle}"></property>
  		<property name="minIdle" value="${dbcp.minIdle}"></property>
  		<property name="maxWait" value="${dbcp.maxWait}"></property>
  		<property name="removeAbandoned" value="${dbcp.removeAbandoned}"></property>
  		<property name="removeAbandonedTimeout" value="${dbcp.removeAbandonedTimeout}"></property>
  		<property name="logAbandoned" value="${dbcp.logAbandoned}"></property>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource"/>
	</bean>
	
	<bean id="jdbcTemplateLocationDataSource" class="cn.edu.uestc.indoorlocation.dao.datasource.JdbcTemplateLocationDataSource">	
		<constructor-arg ref="jdbcTemplate" />
	</bean>
	
	<!-- 扩展卡尔曼滤波 -->
	<bean id="ekf" class="cn.edu.uestc.indoorlocation.algorithm.kalman.EKF">
	</bean>
	
	<!-- 粒子滤波，默认粒子数为1000 -->
	<bean id="pf" class="cn.edu.uestc.indoorlocation.algorithm.particle_filter.PF">
		<constructor-arg value="1000" />
	</bean>

	<bean id="knnLocation" class="cn.edu.uestc.indoorlocation.algorithm.knn.KNNLocation" scope="prototype">
		<constructor-arg value="cosine" />
		<constructor-arg value="6" />
		<property name="dataSource" ref="jdbcTemplateLocationDataSource" />
		<property name="filter" ref="pf"/>
	</bean>
	
	<!-- ServerInitializer -->
	<bean id="serverInitializer" class="cn.edu.uestc.indoorlocation.communication.server.ServerInitializer" >
		<!-- <property name="messageDecoder" ref="messageDecoder" /> -->
		<!--  已注释
		<property name="byteToJsonDecoder" ref="byteToJsonDecoder" />
		<property name="jsonToByteEncoder" ref="jsonToByteEncoder" />
		<property name="authDecoder" ref="authDecoder" />
		<property name="messageHandler" ref="messageHandler" />
		<property name="locationHandler" ref="locationHandler" /> 
		-->
		<property name="location" ref="knnLocation"/>
	</bean>

	<bean id="defaultServer"  class="cn.edu.uestc.indoorlocation.communication.server.DefaultNettyServerAcceptor">
		<constructor-arg  value="${server.port}"/> 
		<property name="initializer" ref="serverInitializer" />
	</bean>

</beans>
